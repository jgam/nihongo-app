{"ast":null,"code":"var _jsxFileName = \"/Users/jeonghan.gam/Desktop/jgam/nihongo-app/src/Database.js\";\nimport React from 'react';\n/*\nDB creating steps\n1. Open a database\n2. Create an object store in the database\n3. Start a transaction and make a request to do some database operation, like adding or retrieving dta.\n4. Wait for the operation to complete by listening for the right kind of DOM event\n5. Do something with the rsults(whcih can be found on the request object).\n*/\n\nconst Database = ({\n  level,\n  handleButton\n}) => {\n  var request = indexedDB.open('EXAMPLE_DB', 1);\n  var db; //request on success\n\n  request.onsuccess = function (event) {\n    console.log('[onsuccess]', request.result);\n    db = event.target.result; // === request.result\n    //vocab DB data should be defined here\n\n    var vocabs_db = [{\n      id: 1,\n      name: 'red',\n      price: '$3.99'\n    }, {\n      id: 2,\n      name: 'blue',\n      price: '$4.99'\n    }];\n    var transaction = db.transaction('VocabDB', 'readwrite'); //success event handler for transaction\n\n    transaction.onsuccess = function (event) {\n      console.log('[transaction] ALL DONE!');\n    };\n\n    var productsStore = transaction.objectStore('VocabDB');\n    vocabs_db.forEach(function (product) {\n      var db_op_req = productsStore.add(product); //IDBRequest\n\n      db_op_req.onsuccess = function (event) {\n        console.log(event.target.result == product.id);\n      };\n    });\n  }; //request on error\n\n\n  request.onerror = function (event) {\n    console.log('[onerror]', request.error);\n  }; //request on upgrade needed \n\n\n  request.onupgradeneeded = function (event) {\n    // create object store from db or event.target.result\n    var db = event.target.result; //here crated Objectstore\n\n    var productStore = db.createObjectStore('VocabDB', {\n      KeyPth: 'id'\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"hello world\");\n};\n\nexport default Database;","map":{"version":3,"sources":["/Users/jeonghan.gam/Desktop/jgam/nihongo-app/src/Database.js"],"names":["React","Database","level","handleButton","request","indexedDB","open","db","onsuccess","event","console","log","result","target","vocabs_db","id","name","price","transaction","productsStore","objectStore","forEach","product","db_op_req","add","onerror","error","onupgradeneeded","productStore","createObjectStore","KeyPth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;;;;;;;;AAUA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA4B;AACzC,MAAIC,OAAO,GAAGC,SAAS,CAACC,IAAV,CAAe,YAAf,EAA6B,CAA7B,CAAd;AACA,MAAIC,EAAJ,CAFyC,CAIzC;;AACAH,EAAAA,OAAO,CAACI,SAAR,GAAoB,UAASC,KAAT,EAAgB;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BP,OAAO,CAACQ,MAAnC;AACAL,IAAAA,EAAE,GAAGE,KAAK,CAACI,MAAN,CAAaD,MAAlB,CAFgC,CAEN;AAE1B;;AACA,QAAIE,SAAS,GAAG,CACZ;AAACC,MAAAA,EAAE,EAAE,CAAL;AAAQC,MAAAA,IAAI,EAAE,KAAd;AAAqBC,MAAAA,KAAK,EAAE;AAA5B,KADY,EAEZ;AAACF,MAAAA,EAAE,EAAE,CAAL;AAAQC,MAAAA,IAAI,EAAE,MAAd;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KAFY,CAAhB;AAKA,QAAIC,WAAW,GAAGX,EAAE,CAACW,WAAH,CAAe,SAAf,EAA0B,WAA1B,CAAlB,CAVgC,CAYhC;;AACAA,IAAAA,WAAW,CAACV,SAAZ,GAAwB,UAASC,KAAT,EAAe;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACH,KAFD;;AAIA,QAAIQ,aAAa,GAAGD,WAAW,CAACE,WAAZ,CAAwB,SAAxB,CAApB;AAEAN,IAAAA,SAAS,CAACO,OAAV,CAAkB,UAASC,OAAT,EAAiB;AAC/B,UAAIC,SAAS,GAAGJ,aAAa,CAACK,GAAd,CAAkBF,OAAlB,CAAhB,CAD+B,CACY;;AAE3CC,MAAAA,SAAS,CAACf,SAAV,GAAoB,UAASC,KAAT,EAAe;AAC/BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACI,MAAN,CAAaD,MAAb,IAAuBU,OAAO,CAACP,EAA3C;AACH,OAFD;AAGH,KAND;AAOH,GA1BD,CALyC,CAiCzC;;;AACAX,EAAAA,OAAO,CAACqB,OAAR,GAAkB,UAAShB,KAAT,EAAgB;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBP,OAAO,CAACsB,KAAjC;AACH,GAFD,CAlCyC,CAsCzC;;;AACAtB,EAAAA,OAAO,CAACuB,eAAR,GAA0B,UAASlB,KAAT,EAAgB;AACtC;AAEA,QAAIF,EAAE,GAAGE,KAAK,CAACI,MAAN,CAAaD,MAAtB,CAHsC,CAItC;;AACA,QAAIgB,YAAY,GAAGrB,EAAE,CAACsB,iBAAH,CAAqB,SAArB,EAAgC;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAhC,CAAnB;AAEH,GAPD;;AASA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ;AAMH,CAtDD;;AAwDA,eAAe7B,QAAf","sourcesContent":["import React from 'react';\n\n/*\nDB creating steps\n1. Open a database\n2. Create an object store in the database\n3. Start a transaction and make a request to do some database operation, like adding or retrieving dta.\n4. Wait for the operation to complete by listening for the right kind of DOM event\n5. Do something with the rsults(whcih can be found on the request object).\n*/\n\n\nconst Database = ({ level, handleButton }) =>{\n    var request = indexedDB.open('EXAMPLE_DB', 1);\n    var db;\n\n    //request on success\n    request.onsuccess = function(event) {\n        console.log('[onsuccess]', request.result);\n        db = event.target.result; // === request.result\n\n        //vocab DB data should be defined here\n        var vocabs_db = [\n            {id: 1, name: 'red', price: '$3.99'},\n            {id: 2, name: 'blue', price: '$4.99'}\n        ];\n\n        var transaction = db.transaction('VocabDB', 'readwrite');\n\n        //success event handler for transaction\n        transaction.onsuccess = function(event){\n            console.log('[transaction] ALL DONE!')\n        }\n\n        var productsStore = transaction.objectStore('VocabDB');\n\n        vocabs_db.forEach(function(product){\n            var db_op_req = productsStore.add(product);//IDBRequest\n\n            db_op_req.onsuccess=function(event){\n                console.log(event.target.result == product.id);\n            }\n        });\n    };\n\n    //request on error\n    request.onerror = function(event) {\n        console.log('[onerror]', request.error);\n    };\n\n    //request on upgrade needed \n    request.onupgradeneeded = function(event) {\n        // create object store from db or event.target.result\n\n        var db = event.target.result;\n        //here crated Objectstore\n        var productStore = db.createObjectStore('VocabDB', {KeyPth: 'id'});\n\n    };\n\n    return(\n        <div>\n            hello world\n        </div>\n    )\n\n}\n\nexport default Database;"]},"metadata":{},"sourceType":"module"}