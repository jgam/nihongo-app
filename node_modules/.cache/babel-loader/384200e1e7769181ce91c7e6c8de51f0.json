{"ast":null,"code":"var _jsxFileName = \"/Users/jeonghan.gam/Desktop/jgam/nihongo-app/src/Database.js\";\nimport React from 'react';\n/*\nDB creating steps\n1. Open a database\n2. Create an object store in the database\n3. Start a transaction and make a request to do some database operation, like adding or retrieving dta.\n4. Wait for the operation to complete by listening for the right kind of DOM event\n5. Do something with the rsults(whcih can be found on the request object).\n*/\n\nconst Database = ({\n  words\n}) => {\n  var request = indexedDB.open('VocabDB', 1);\n  var db, vocabs_db;\n  /*\n  Now, we write these words to database and use the data to randomly create the test.\n  */\n  //request on success\n\n  request.onsuccess = function (event) {\n    console.log('[onsuccess]', request.result);\n    db = event.target.result; // === request.result\n    //vocab DB data should be defined here\n\n    var vocabs_db = words;\n    var testing_vocabs = [];\n    var random_i = 10;\n\n    while (random_i < vocabs_db.length - 10) {\n      //this done\n      console.log('while loop random_i = ', random_i);\n      testing_vocabs.push(vocabs_db[random_i - Math.floor(Math.random() * 10)]);\n      random_i += 10;\n    }\n\n    vocabs_db = testing_vocabs; //now we are renewing the new vocabs to database\n    //words is changed to testing_vocabs\n\n    words = testing_vocabs; //words didn't change.\n    //here you need to shuffle the words\n    //and put those words into as a vocab test.\n\n    var transaction = db.transaction('VocabDB', 'readwrite'); //success event handler for transaction\n\n    transaction.onsuccess = function (event) {\n      console.log('[transaction] ALL DONE!');\n    };\n\n    var productsStore = transaction.objectStore('VocabDB');\n    vocabs_db.forEach(function (product) {\n      productsStore.add(product); //IDBRequest\n    });\n    /*\n    some tips how to CRUD the data\n    // count number of objects in store\n    productsStore.count().onsuccess = function(event) {\n        console.log('[Transaction - COUNT] number of products in store', event.target.result);\n    };\n     // get product with id 1\n    productsStore.get(1).onsuccess = function(event) {\n        console.log('[Transaction - GET] product with id 1', event.target.result);\n    };\n     // update product with id 1\n    products[0].name = 'Blue Men T-shirt';\n    productsStore.put(products[0]).onsuccess = function(event) {\n        console.log('[Transaction - PUT] product with id 1', event.target.result);\n    };\n     // delete product with id 2\n    productsStore.delete(2).onsuccess = function(event) {\n        console.log('[Transaction - DELETE] deleted with id 2');\n    };\n    */\n  }; //request on error\n\n\n  request.onerror = function (event) {\n    console.log('[onerror]', request.error);\n  }; //request on upgrade needed \n\n\n  request.onupgradeneeded = function (event) {\n    // create object store from db or event.target.result\n    var db = event.target.result; //here crated Objectstore\n\n    var productsStore = db.createObjectStore('VocabDB', {\n      keyPath: 'index'\n    });\n  }; //another method to access db and import from db\n  //this can be reused with creating odab note!\n\n\n  console.log('db is ', db); //var db = request.result;\n  //console.log(db.transaction('VocabDB').objectStore('VocabDB'));\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"hello world\", vocabs_db.map(word => React.createElement(\"div\", {\n    className: \"word\",\n    key: word.word,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, word.word, \" : \", word.meaning)));\n};\n\nexport default Database;","map":{"version":3,"sources":["/Users/jeonghan.gam/Desktop/jgam/nihongo-app/src/Database.js"],"names":["React","Database","words","request","indexedDB","open","db","vocabs_db","onsuccess","event","console","log","result","target","testing_vocabs","random_i","length","push","Math","floor","random","transaction","productsStore","objectStore","forEach","product","add","onerror","error","onupgradeneeded","createObjectStore","keyPath","map","word","meaning"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;;;;;;;;AAUA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC3B,MAAIC,OAAO,GAAGC,SAAS,CAACC,IAAV,CAAe,SAAf,EAA0B,CAA1B,CAAd;AACA,MAAIC,EAAJ,EAAQC,SAAR;AACA;;;AAGA;;AACAJ,EAAAA,OAAO,CAACK,SAAR,GAAoB,UAASC,KAAT,EAAgB;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BR,OAAO,CAACS,MAAnC;AACAN,IAAAA,EAAE,GAAGG,KAAK,CAACI,MAAN,CAAaD,MAAlB,CAFgC,CAEN;AAE1B;;AACA,QAAIL,SAAS,GAAGL,KAAhB;AACA,QAAIY,cAAc,GAAG,EAArB;AACA,QAAIC,QAAQ,GAAG,EAAf;;AACA,WAAMA,QAAQ,GAAGR,SAAS,CAACS,MAAV,GAAmB,EAApC,EAAuC;AACnC;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCI,QAAtC;AACAD,MAAAA,cAAc,CAACG,IAAf,CAAoBV,SAAS,CAACQ,QAAQ,GAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAZ,CAA7B;AACAL,MAAAA,QAAQ,IAAI,EAAZ;AACH;;AACDR,IAAAA,SAAS,GAAGO,cAAZ,CAdgC,CAcL;AAC3B;;AACAZ,IAAAA,KAAK,GAAGY,cAAR,CAhBgC,CAgBT;AACvB;AACA;;AAEA,QAAIO,WAAW,GAAGf,EAAE,CAACe,WAAH,CAAe,SAAf,EAA0B,WAA1B,CAAlB,CApBgC,CAsBhC;;AACAA,IAAAA,WAAW,CAACb,SAAZ,GAAwB,UAASC,KAAT,EAAe;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACH,KAFD;;AAIA,QAAIW,aAAa,GAAGD,WAAW,CAACE,WAAZ,CAAwB,SAAxB,CAApB;AAEAhB,IAAAA,SAAS,CAACiB,OAAV,CAAkB,UAASC,OAAT,EAAiB;AAC/BH,MAAAA,aAAa,CAACI,GAAd,CAAkBD,OAAlB,EAD+B,CACJ;AAC9B,KAFD;AAGA;;;;;;;;;;;;;;;;;;;;AAuBH,GAvDD,CAP2B,CAgE3B;;;AACAtB,EAAAA,OAAO,CAACwB,OAAR,GAAkB,UAASlB,KAAT,EAAgB;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBR,OAAO,CAACyB,KAAjC;AACH,GAFD,CAjE2B,CAqE3B;;;AACAzB,EAAAA,OAAO,CAAC0B,eAAR,GAA0B,UAASpB,KAAT,EAAgB;AACtC;AAEA,QAAIH,EAAE,GAAGG,KAAK,CAACI,MAAN,CAAaD,MAAtB,CAHsC,CAItC;;AACA,QAAIU,aAAa,GAAGhB,EAAE,CAACwB,iBAAH,CAAqB,SAArB,EAAgC;AAACC,MAAAA,OAAO,EAAE;AAAV,KAAhC,CAApB;AAEH,GAPD,CAtE2B,CA+E3B;AACA;;;AAEArB,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBL,EAAtB,EAlF2B,CAmF3B;AACA;;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEKC,SAAS,CAACyB,GAAV,CAAcC,IAAI,IACnB;AAAK,IAAA,SAAS,EAAC,MAAf;AAAsB,IAAA,GAAG,EAAEA,IAAI,CAACA,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuCA,IAAI,CAACA,IAA5C,SAAqDA,IAAI,CAACC,OAA1D,CADC,CAFL,CADJ;AASH,CA/FD;;AAiGA,eAAejC,QAAf","sourcesContent":["import React from 'react';\n\n/*\nDB creating steps\n1. Open a database\n2. Create an object store in the database\n3. Start a transaction and make a request to do some database operation, like adding or retrieving dta.\n4. Wait for the operation to complete by listening for the right kind of DOM event\n5. Do something with the rsults(whcih can be found on the request object).\n*/\n\n\nconst Database = ({ words }) =>{\n    var request = indexedDB.open('VocabDB', 1);\n    var db, vocabs_db;\n    /*\n    Now, we write these words to database and use the data to randomly create the test.\n    */\n    //request on success\n    request.onsuccess = function(event) {\n        console.log('[onsuccess]', request.result);\n        db = event.target.result; // === request.result\n\n        //vocab DB data should be defined here\n        var vocabs_db = words;\n        var testing_vocabs = [];\n        var random_i = 10;\n        while(random_i < vocabs_db.length - 10){\n            //this done\n            console.log('while loop random_i = ', random_i);\n            testing_vocabs.push(vocabs_db[random_i - Math.floor(Math.random() * 10)]);\n            random_i += 10;\n        }\n        vocabs_db = testing_vocabs;//now we are renewing the new vocabs to database\n        //words is changed to testing_vocabs\n        words = testing_vocabs;//words didn't change.\n        //here you need to shuffle the words\n        //and put those words into as a vocab test.\n\n        var transaction = db.transaction('VocabDB', 'readwrite');\n\n        //success event handler for transaction\n        transaction.onsuccess = function(event){\n            console.log('[transaction] ALL DONE!')\n        }\n\n        var productsStore = transaction.objectStore('VocabDB');\n\n        vocabs_db.forEach(function(product){\n            productsStore.add(product);//IDBRequest\n        });\n        /*\n        some tips how to CRUD the data\n        // count number of objects in store\n        productsStore.count().onsuccess = function(event) {\n            console.log('[Transaction - COUNT] number of products in store', event.target.result);\n        };\n\n        // get product with id 1\n        productsStore.get(1).onsuccess = function(event) {\n            console.log('[Transaction - GET] product with id 1', event.target.result);\n        };\n\n        // update product with id 1\n        products[0].name = 'Blue Men T-shirt';\n        productsStore.put(products[0]).onsuccess = function(event) {\n            console.log('[Transaction - PUT] product with id 1', event.target.result);\n        };\n\n        // delete product with id 2\n        productsStore.delete(2).onsuccess = function(event) {\n            console.log('[Transaction - DELETE] deleted with id 2');\n        };\n        */\n    };\n\n    //request on error\n    request.onerror = function(event) {\n        console.log('[onerror]', request.error);\n    };\n\n    //request on upgrade needed \n    request.onupgradeneeded = function(event) {\n        // create object store from db or event.target.result\n\n        var db = event.target.result;\n        //here crated Objectstore\n        var productsStore = db.createObjectStore('VocabDB', {keyPath: 'index'});\n\n    };\n\n    //another method to access db and import from db\n    //this can be reused with creating odab note!\n    \n    console.log('db is ', db);\n    //var db = request.result;\n    //console.log(db.transaction('VocabDB').objectStore('VocabDB'));\n\n    return(\n        <div>\n            hello world\n            {vocabs_db.map(word => (\n            <div className=\"word\" key={word.word}>{word.word} : {word.meaning}</div>\n        ))}\n        </div>\n    )\n\n}\n\nexport default Database;"]},"metadata":{},"sourceType":"module"}