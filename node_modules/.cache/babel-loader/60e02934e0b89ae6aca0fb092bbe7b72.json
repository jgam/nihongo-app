{"ast":null,"code":"var _jsxFileName = \"/Users/jeonghan.gam/Desktop/jgam/nihongo-app/src/Vocab.js\";\nimport React from 'react';\nimport { tsConstructorType } from '@babel/types';\nimport Button from 'react-bootstrap/Button';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nconst Vocab = ({\n  output_words,\n  handleButton,\n  prevButton,\n  nextButton,\n  list_words,\n  vocab_portion,\n  day,\n  handleHome,\n  updateDB\n}) => {\n  var request = indexedDB.open('VocabDB', 1);\n  var db, vocabs_db;\n  /*\n  Now, we write these words to database and use the data to randomly create the test.\n  */\n  //request on success\n\n  request.onsuccess = function (event) {\n    console.log('[onsuccess]', request.result);\n    db = event.target.result; // === request.result\n    //vocab DB data should be defined here\n\n    var vocabs_db = words;\n    var testing_vocabs = [];\n    var random_i = 10;\n\n    while (random_i < vocabs_db.length - 10) {\n      //this done\n      console.log('while loop random_i = ', random_i);\n      testing_vocabs.push(vocabs_db[random_i - Math.floor(Math.random() * 10)]);\n      random_i += 10;\n    }\n\n    vocabs_db = testing_vocabs; //now we are renewing the new vocabs to database\n    //words is changed to testing_vocabs\n\n    words = testing_vocabs; //words didn't change.\n\n    var transaction = db.transaction('VocabDB', 'readwrite'); //success event handler for transaction\n\n    transaction.onsuccess = function (event) {\n      console.log('[transaction] ALL DONE!');\n    };\n\n    var productsStore = transaction.objectStore('VocabDB');\n    vocabs_db.forEach(function (product) {\n      productsStore.add(product); //IDBRequest\n    });\n    /*\n    some tips how to CRUD the data\n    // count number of objects in store\n    productsStore.count().onsuccess = function(event) {\n        console.log('[Transaction - COUNT] number of products in store', event.target.result);\n    };\n     // get product with id 1\n    productsStore.get(1).onsuccess = function(event) {\n        console.log('[Transaction - GET] product with id 1', event.target.result);\n    };\n     // update product with id 1\n    products[0].name = 'Blue Men T-shirt';\n    productsStore.put(products[0]).onsuccess = function(event) {\n        console.log('[Transaction - PUT] product with id 1', event.target.result);\n    };\n     // delete product with id 2\n    productsStore.delete(2).onsuccess = function(event) {\n        console.log('[Transaction - DELETE] deleted with id 2');\n    };\n    */\n  }; //request on error\n\n\n  request.onerror = function (event) {\n    console.log('[onerror]', request.error);\n  }; //request on upgrade needed \n\n\n  request.onupgradeneeded = function (event) {\n    // create object store from db or event.target.result\n    var db = event.target.result; //here crated Objectstore\n\n    var productsStore = db.createObjectStore('VocabDB', {\n      keyPath: 'index'\n    });\n  }; //another method to access db and import from db\n  //this can be reused with creating odab note!\n\n\n  console.log('db is ', db); //var db = request.result;\n  //console.log(db.transaction('VocabDB').objectStore('VocabDB'));\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\",\n    integrity: \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\",\n    crossOrigin: \"anonymous\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(ButtonToolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => handleHome(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \" home \")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => prevButton(day - 1, list_words.slice(vocab_portion * (day - 2), vocab_portion * (day - 1)), list_words, vocab_portion),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Previous\"), React.createElement(\"button\", {\n    onClick: () => nextButton(day + 1, list_words.slice(vocab_portion * day, vocab_portion * (day + 1)), list_words, vocab_portion),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Next\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => updateDB(output_words),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \" Exam! \"), output_words.map(word => React.createElement(\"div\", {\n    className: \"word\",\n    key: word.word,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, word.word, \" : \", word.meaning)));\n};\n\nexport default Vocab;","map":{"version":3,"sources":["/Users/jeonghan.gam/Desktop/jgam/nihongo-app/src/Vocab.js"],"names":["React","tsConstructorType","Button","ButtonToolbar","Vocab","output_words","handleButton","prevButton","nextButton","list_words","vocab_portion","day","handleHome","updateDB","request","indexedDB","open","db","vocabs_db","onsuccess","event","console","log","result","target","words","testing_vocabs","random_i","length","push","Math","floor","random","transaction","productsStore","objectStore","forEach","product","add","onerror","error","onupgradeneeded","createObjectStore","keyPath","slice","map","word","meaning"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { tsConstructorType } from '@babel/types';\nimport Button from 'react-bootstrap/Button'\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar'\n\nconst Vocab = ({ output_words, handleButton, prevButton, nextButton, list_words, vocab_portion, day, handleHome, updateDB }) => {\n    var request = indexedDB.open('VocabDB', 1);\n    var db, vocabs_db;\n    /*\n    Now, we write these words to database and use the data to randomly create the test.\n    */\n    \n    //request on success\n    request.onsuccess = function(event) {\n        console.log('[onsuccess]', request.result);\n        db = event.target.result; // === request.result\n\n        //vocab DB data should be defined here\n        var vocabs_db = words;\n        var testing_vocabs = [];\n        var random_i = 10;\n        while(random_i < vocabs_db.length - 10){\n            //this done\n            console.log('while loop random_i = ', random_i);\n            testing_vocabs.push(vocabs_db[random_i - Math.floor(Math.random() * 10)]);\n            random_i += 10;\n        }\n        vocabs_db = testing_vocabs;//now we are renewing the new vocabs to database\n        //words is changed to testing_vocabs\n        words = testing_vocabs;//words didn't change.\n\n        var transaction = db.transaction('VocabDB', 'readwrite');\n\n        //success event handler for transaction\n        transaction.onsuccess = function(event){\n            console.log('[transaction] ALL DONE!')\n        }\n\n        var productsStore = transaction.objectStore('VocabDB');\n\n        vocabs_db.forEach(function(product){\n            productsStore.add(product);//IDBRequest\n        });\n        /*\n        some tips how to CRUD the data\n        // count number of objects in store\n        productsStore.count().onsuccess = function(event) {\n            console.log('[Transaction - COUNT] number of products in store', event.target.result);\n        };\n\n        // get product with id 1\n        productsStore.get(1).onsuccess = function(event) {\n            console.log('[Transaction - GET] product with id 1', event.target.result);\n        };\n\n        // update product with id 1\n        products[0].name = 'Blue Men T-shirt';\n        productsStore.put(products[0]).onsuccess = function(event) {\n            console.log('[Transaction - PUT] product with id 1', event.target.result);\n        };\n\n        // delete product with id 2\n        productsStore.delete(2).onsuccess = function(event) {\n            console.log('[Transaction - DELETE] deleted with id 2');\n        };\n        */\n    };\n\n    //request on error\n    request.onerror = function(event) {\n        console.log('[onerror]', request.error);\n    };\n\n    //request on upgrade needed \n    request.onupgradeneeded = function(event) {\n        // create object store from db or event.target.result\n\n        var db = event.target.result;\n        //here crated Objectstore\n        var productsStore = db.createObjectStore('VocabDB', {keyPath: 'index'});\n\n    };\n\n    //another method to access db and import from db\n    //this can be reused with creating odab note!\n    \n    console.log('db is ', db);\n    //var db = request.result;\n    //console.log(db.transaction('VocabDB').objectStore('VocabDB'));\n\n    return (\n\t  <div>\n        <link\n                rel=\"stylesheet\"\n                href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n                integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n                crossOrigin=\"anonymous\"\n            />\n        <ButtonToolbar>\n            <Button onClick={()=> handleHome()}> home </Button>\n        </ButtonToolbar>\n\t\t{/*<button onClick={() => handleButton(output_words.slice(0, 19))}>Home</button>*/}\n        <br></br>\n\t\t<button onClick={() => prevButton(day-1,list_words.slice(vocab_portion*(day-2), vocab_portion*(day-1)),list_words,vocab_portion)}>Previous</button>\n        <button onClick={() => nextButton(day+1,list_words.slice(vocab_portion*(day), vocab_portion*(day+1)),list_words,vocab_portion)}>Next</button>\n        <br></br>\n        <button onClick={()=> updateDB(output_words)}> Exam! </button>\n        {/*{JSON.stringify(output_words)}*/}\n        {/*{output_words.map((item) => <li>{item}</li>)}*/}\n        {output_words.map(word => (\n            <div className=\"word\" key={word.word}>{word.word} : {word.meaning}</div>\n        ))}\n\t  </div>\n\t);\n  };\n  \n  export default Vocab;"]},"metadata":{},"sourceType":"module"}