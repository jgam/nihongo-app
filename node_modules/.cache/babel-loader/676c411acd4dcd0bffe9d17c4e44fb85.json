{"ast":null,"code":"import Dexie from 'dexie';\nimport React from 'react';\nimport { directive } from '@babel/types';\n\nconst Database = ({\n  condition,\n  output_words\n}) => {\n  console.log(condition, 'condition confirm');\n  var request = indexedDB.open('VocabDB', 1);\n  var db, vocabs_db;\n  /*\n  Now, we write these words to database and use the data to randomly create the test.\n  */\n\n  console.log('initial outputwords are: ', output_words); //request on success\n\n  request.onsuccess = function (event) {\n    console.log('[onsuccess]', request.result);\n    db = event.target.result; // === request.result\n    //vocab DB data should be defined here\n\n    var vocabs_db = output_words;\n    var testing_vocabs = [];\n    var random_i = 10; //taking out 1 vocab for every 10 vocabs\n\n    while (random_i < vocabs_db.length - 10) {\n      //this done\n      console.log('while loop random_i = ', random_i);\n      testing_vocabs.push(vocabs_db[random_i - Math.floor(Math.random() * 10)]);\n      random_i += 10;\n    }\n\n    vocabs_db = testing_vocabs; //now we are renewing the new vocabs to database\n    //words is changed to testing_vocabs\n\n    output_words = testing_vocabs; //words didn't change.\n\n    console.log('after modified outputwords : ', output_words);\n    var transaction = db.transaction('VocabDB', 'readwrite'); //success event handler for transaction\n\n    transaction.onsuccess = function (event) {\n      console.log('[transaction] ALL DONE!');\n    };\n\n    var productsStore = transaction.objectStore('VocabDB');\n\n    if (condition == '1') {\n      vocabs_db.forEach(function (product) {\n        productsStore.add(product); //IDBRequest\n      });\n    } else {\n      productsStore.getAll().onsuccess = function (event) {\n        console.log('here is condition 2');\n        console.log(event.target.result);\n        vocabs_db = event.target.result;\n      };\n    }\n    /*\n    some tips how to CRUD the data\n    // count number of objects in store\n    productsStore.count().onsuccess = function(event) {\n        console.log('[Transaction - COUNT] number of products in store', event.target.result);\n    };\n     // get product with id 1\n    productsStore.get(1).onsuccess = function(event) {\n        console.log('[Transaction - GET] product with id 1', event.target.result);\n    };\n     // update product with id 1\n    products[0].name = 'Blue Men T-shirt';\n    productsStore.put(products[0]).onsuccess = function(event) {\n        console.log('[Transaction - PUT] product with id 1', event.target.result);\n    };\n     // delete product with id 2\n    productsStore.delete(2).onsuccess = function(event) {\n        console.log('[Transaction - DELETE] deleted with id 2');\n    };\n    */\n\n  }; //request on error\n\n\n  request.onerror = function (event) {\n    console.log('[onerror]', request.error);\n  }; //request on upgrade needed \n\n\n  request.onupgradeneeded = function (event) {\n    // create object store from db or event.target.result\n    var db = event.target.result; //here crated Objectstore\n\n    var productsStore = db.createObjectStore('VocabDB', {\n      keyPath: 'index'\n    });\n    console.log('alelalelael');\n  };\n\n  console.log('outputwords are : ', output_words);\n  return null;\n};\n/* \nconst Database = new Dexie('VocabDB');\nDatabase.version(1).stores({\n    vocabs: `index,name, age`\n});\n*/\n\n\nexport default Database;","map":{"version":3,"sources":["/Users/jeonghan.gam/Desktop/jgam/nihongo-app/src/Database.js"],"names":["Dexie","React","directive","Database","condition","output_words","console","log","request","indexedDB","open","db","vocabs_db","onsuccess","event","result","target","testing_vocabs","random_i","length","push","Math","floor","random","transaction","productsStore","objectStore","forEach","product","add","getAll","onerror","error","onupgradeneeded","createObjectStore","keyPath"],"mappings":"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","sourcesContent":["import Dexie from 'dexie';\nimport React from 'react';\nimport { directive } from '@babel/types';\n\n\nconst Database = ({condition,output_words}) => {\n    console.log(condition, 'condition confirm');\n    var request = indexedDB.open('VocabDB', 1);\n    var db, vocabs_db;\n    /*\n    Now, we write these words to database and use the data to randomly create the test.\n    */\n   console.log('initial outputwords are: ', output_words);\n    \n    //request on success\n    request.onsuccess = function(event) {\n        console.log('[onsuccess]', request.result);\n        db = event.target.result; // === request.result\n\n        //vocab DB data should be defined here\n        var vocabs_db = output_words;\n        var testing_vocabs = [];\n        var random_i = 10;\n\n        //taking out 1 vocab for every 10 vocabs\n        while(random_i < vocabs_db.length - 10){\n            //this done\n            console.log('while loop random_i = ', random_i);\n            testing_vocabs.push(vocabs_db[random_i - Math.floor(Math.random() * 10)]);\n            random_i += 10;\n        }\n        vocabs_db = testing_vocabs;//now we are renewing the new vocabs to database\n        //words is changed to testing_vocabs\n        output_words = testing_vocabs;//words didn't change.\n        console.log('after modified outputwords : ',output_words);\n\n        var transaction = db.transaction('VocabDB', 'readwrite');\n\n        //success event handler for transaction\n        transaction.onsuccess = function(event){\n            console.log('[transaction] ALL DONE!')\n        }\n\n        var productsStore = transaction.objectStore('VocabDB');\n        if(condition == '1'){\n            vocabs_db.forEach(function(product){\n                productsStore.add(product);//IDBRequest\n            });\n        }\n        else{\n            productsStore.getAll().onsuccess = function(event){\n                console.log('here is condition 2');\n                console.log(event.target.result);\n                vocabs_db = event.target.result;\n            };\n        }\n        /*\n        some tips how to CRUD the data\n        // count number of objects in store\n        productsStore.count().onsuccess = function(event) {\n            console.log('[Transaction - COUNT] number of products in store', event.target.result);\n        };\n\n        // get product with id 1\n        productsStore.get(1).onsuccess = function(event) {\n            console.log('[Transaction - GET] product with id 1', event.target.result);\n        };\n\n        // update product with id 1\n        products[0].name = 'Blue Men T-shirt';\n        productsStore.put(products[0]).onsuccess = function(event) {\n            console.log('[Transaction - PUT] product with id 1', event.target.result);\n        };\n\n        // delete product with id 2\n        productsStore.delete(2).onsuccess = function(event) {\n            console.log('[Transaction - DELETE] deleted with id 2');\n        };\n        */\n    };\n\n    //request on error\n    request.onerror = function(event) {\n        console.log('[onerror]', request.error);\n    };\n\n    //request on upgrade needed \n    request.onupgradeneeded = function(event) {\n        // create object store from db or event.target.result\n\n        var db = event.target.result;\n        //here crated Objectstore\n        var productsStore = db.createObjectStore('VocabDB', {keyPath: 'index'});\n        console.log('alelalelael');\n    };\n    console.log('outputwords are : ', output_words);\n    \n    return null;\n\n\n}\n/* \nconst Database = new Dexie('VocabDB');\nDatabase.version(1).stores({\n    vocabs: `index,name, age`\n});\n*/\nexport default Database;\n"]},"metadata":{},"sourceType":"module"}