{"ast":null,"code":"import _defineProperty from \"/Users/jeonghan.gam/Desktop/jgam/nihongo-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/jeonghan.gam/Desktop/jgam/nihongo-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jeonghan.gam/Desktop/jgam/nihongo-app/src/Form.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Offline, Online } from 'react-detect-offline'; // some inline styling so everything isn't squished\n\nconst formStyle = {\n  padding: '2rem 0rem'\n};\nconst inputStyle = {\n  margin: '1rem 0rem' // a simple form with a first name, last name, and submit button\n\n};\n\nconst Form = ({\n  db\n}) => {\n  // store form values in a state hook\n  const _useState = useState({\n    firstname: '',\n    lastname: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        names = _useState2[0],\n        setNames = _useState2[1];\n\n  useEffect(() => {\n    // create the store\n    db.version(1).stores({\n      formData: 'id,value'\n    });\n    db.transaction('rw', db.formData, async () => {\n      //get the first and last name from the data\n      const dbFirstname = await db.formData.get('firstname');\n      const dbLastname = await db.formData.get('lastname'); //if the first or last name fields have not be added, add them\n\n      if (!dbFirstname) await db.formData.add({\n        id: 'firstname',\n        value: ''\n      });\n      if (!dbLastname) await db.formData.add({\n        id: 'lastname',\n        value: ''\n      }); //set the initial values\n\n      setNames({\n        firstname: dbFirstname ? dbFirstname.value : '',\n        lastname: dbLastname ? dbLastname.value : ''\n      });\n    }).catch(e => {\n      //log any errors\n      console.log(e.stack || e);\n    });\n    return () => db.close();\n  }, // run effect whenever the database connection changes\n  [db]); // sets the name in the store and in the state hook\n\n  const setName = id => value => {\n    console.log(db); // update the store\n\n    db.formData.put({\n      id,\n      value\n    }); // update the state hook\n\n    setNames(prevNames => _objectSpread({}, prevNames, {\n      [id]: value\n    }));\n  }; // partial application to make on change handler easier to deal with\n\n\n  const handleSetName = id => e => setName(id)(e.target.value); // when the form is submitted, prevent the default action\n  // which reloads the page and reset the first and last name\n  // in both the store and in the state hook\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setName('firstname')('');\n    setName('lastname')('');\n  };\n\n  return React.createElement(\"form\", {\n    style: formStyle,\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"First name:\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    style: inputStyle,\n    type: \"text\",\n    name: \"firstname\",\n    value: names.firstname,\n    onChange: handleSetName('firstname'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Last name:\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    style: inputStyle,\n    type: \"text\",\n    name: \"lastname\",\n    value: names.lastname,\n    onChange: handleSetName('lastname'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(Online, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })), React.createElement(Offline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"You are currently offline!\"));\n};\n\nexport default Form;","map":{"version":3,"sources":["/Users/jeonghan.gam/Desktop/jgam/nihongo-app/src/Form.js"],"names":["React","useEffect","useState","Offline","Online","formStyle","padding","inputStyle","margin","Form","db","firstname","lastname","names","setNames","version","stores","formData","transaction","dbFirstname","get","dbLastname","add","id","value","catch","e","console","log","stack","close","setName","put","prevNames","handleSetName","target","handleSubmit","preventDefault"],"mappings":"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","sourcesContent":["\nimport React, { useEffect, useState } from 'react'\nimport { Offline, Online } from 'react-detect-offline'\n\n// some inline styling so everything isn't squished\nconst formStyle = { padding: '2rem 0rem' }\nconst inputStyle = { margin: '1rem 0rem' }\n\n// a simple form with a first name, last name, and submit button\nconst Form = ({ db }) => {\n  // store form values in a state hook\n  const [names, setNames] = useState({ firstname: '', lastname: '' })\n\n  useEffect(\n    () => {\n      // create the store\n      db.version(1).stores({ formData: 'id,value' })\n    \n    \n    db.transaction('rw', db.formData, async () => {\n        //get the first and last name from the data\n        const dbFirstname = await db.formData.get('firstname')\n        const dbLastname = await db.formData.get('lastname')\n\n        //if the first or last name fields have not be added, add them\n        if (!dbFirstname) await db.formData.add({id: 'firstname', value: ''})\n        if (!dbLastname) await db.formData.add({id: 'lastname', value:''})\n\n        //set the initial values\n        setNames({\n            firstname: dbFirstname ? dbFirstname.value : '',\n            lastname: dbLastname ? dbLastname.value: ''\n        })\n    }).catch(e =>{\n        //log any errors\n        console.log(e.stack || e)\n    })\n    return () => db.close()\n    \n    },\n  // run effect whenever the database connection changes\n  [db]\n)\n\n  // sets the name in the store and in the state hook\n  const setName = id => value => {\n    console.log(db)\n    // update the store\n    db.formData.put({ id, value })\n    // update the state hook\n    setNames(prevNames => ({ ...prevNames, [id]: value }))\n  }\n\n  // partial application to make on change handler easier to deal with\n  const handleSetName = id => e => setName(id)(e.target.value)\n\n  // when the form is submitted, prevent the default action\n  // which reloads the page and reset the first and last name\n  // in both the store and in the state hook\n  const handleSubmit = e => {\n    e.preventDefault()\n    setName('firstname')('')\n    setName('lastname')('')\n  }\n\n  return (\n    <form style={formStyle} onSubmit={handleSubmit}>\n      <span>First name:</span>\n      <br />\n      <input\n        style={inputStyle}\n        type=\"text\"\n        name=\"firstname\"\n        value={names.firstname}\n        onChange={handleSetName('firstname')}\n      />\n      <br />\n      <span>Last name:</span>\n      <br />\n      <input\n        style={inputStyle}\n        type=\"text\"\n        name=\"lastname\"\n        value={names.lastname}\n        onChange={handleSetName('lastname')}\n      />\n      <br />\n      {/* Handle whether or not the user is offline */}\n      <Online>\n        <input type=\"submit\" value=\"Submit\" />\n      </Online>\n      <Offline>You are currently offline!</Offline>\n    </form>\n  )\n}\n\nexport default Form"]},"metadata":{},"sourceType":"module"}