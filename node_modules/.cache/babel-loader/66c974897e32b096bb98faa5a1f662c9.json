{"ast":null,"code":"import Dexie from 'dexie';\nimport React from 'react';\nimport { directive } from '@babel/types';\n\nconst Database = ({\n  condition,\n  output_words\n}) => {\n  var request = indexedDB.open('VocabDB', 1);\n  var db, vocabs_db;\n  /*\n  Now, we write these words to database and use the data to randomly create the test.\n  */\n\n  console.log('initial outputwords are: ', output_words); //request on success\n\n  request.onsuccess = function (event) {\n    console.log('[onsuccess]', request.result);\n    db = event.target.result; // === request.result\n    //vocab DB data should be defined here\n\n    var vocabs_db = output_words;\n    var testing_vocabs = [];\n    var random_i = 10;\n\n    if (vocabs_db && vocabs_db.length === 0 || undefined) {\n      return null;\n    } //taking out 1 vocab for every 10 vocabs\n\n\n    while (random_i < vocabs_db.length - 10) {\n      //this done\n      console.log('while loop random_i = ', random_i);\n      testing_vocabs.push(vocabs_db[random_i - Math.floor(Math.random() * 10)]);\n      random_i += 10;\n    }\n\n    vocabs_db = testing_vocabs; //now we are renewing the new vocabs to database\n    //words is changed to testing_vocabs\n\n    output_words = testing_vocabs; //words didn't change.\n\n    console.log('after modified outputwords : ', output_words);\n    var transaction = db.transaction('VocabDB', 'readwrite'); //success event handler for transaction\n\n    transaction.onsuccess = function (event) {\n      console.log('[transaction] ALL DONE!');\n    };\n\n    var productsStore = transaction.objectStore('VocabDB');\n\n    if (condition == '1') {\n      vocabs_db.forEach(function (product) {\n        productsStore.add(product); //IDBRequest\n      });\n    } else {\n      productsStore.getAll().onsuccess = function (event) {\n        console.log('here is condition 2');\n        console.log(event.target.result);\n        vocabs_db = event.target.result;\n        return vocabs_db;\n      };\n    }\n    /*\n    some tips how to CRUD the data\n    // count number of objects in store\n    productsStore.count().onsuccess = function(event) {\n        console.log('[Transaction - COUNT] number of products in store', event.target.result);\n    };\n     // get product with id 1\n    productsStore.get(1).onsuccess = function(event) {\n        console.log('[Transaction - GET] product with id 1', event.target.result);\n    };\n     // update product with id 1\n    products[0].name = 'Blue Men T-shirt';\n    productsStore.put(products[0]).onsuccess = function(event) {\n        console.log('[Transaction - PUT] product with id 1', event.target.result);\n    };\n     // delete product with id 2\n    productsStore.delete(2).onsuccess = function(event) {\n        console.log('[Transaction - DELETE] deleted with id 2');\n    };\n    */\n\n  }; //request on error\n\n\n  request.onerror = function (event) {\n    console.log('[onerror]', request.error);\n  }; //request on upgrade needed \n\n\n  request.onupgradeneeded = function (event) {\n    // create object store from db or event.target.result\n    var db = event.target.result; //here crated Objectstore\n\n    var productsStore = db.createObjectStore('VocabDB', {\n      keyPath: 'index'\n    });\n    console.log('alelalelael');\n  };\n\n  console.log('outputwords are : ', output_words);\n  return null;\n};\n/* \nconst Database = new Dexie('VocabDB');\nDatabase.version(1).stores({\n    vocabs: `index,name, age`\n});\n*/\n\n\nexport default Database;","map":{"version":3,"sources":["/Users/jeonghan.gam/Desktop/jgam/nihongo-app/src/Database.js"],"names":["Dexie","React","directive","Database","condition","output_words","request","indexedDB","open","db","vocabs_db","console","log","onsuccess","event","result","target","testing_vocabs","random_i","length","undefined","push","Math","floor","random","transaction","productsStore","objectStore","forEach","product","add","getAll","onerror","error","onupgradeneeded","createObjectStore","keyPath"],"mappings":"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","sourcesContent":["import Dexie from 'dexie';\nimport React from 'react';\nimport { directive } from '@babel/types';\n\n\nconst Database = ({condition ,output_words}) => {\n    var request = indexedDB.open('VocabDB', 1);\n    var db, vocabs_db;\n    /*\n    Now, we write these words to database and use the data to randomly create the test.\n    */\n   console.log('initial outputwords are: ', output_words);\n    \n    //request on success\n    request.onsuccess = function(event) {\n        console.log('[onsuccess]', request.result);\n        db = event.target.result; // === request.result\n\n        //vocab DB data should be defined here\n        var vocabs_db = output_words;\n        var testing_vocabs = [];\n        var random_i = 10;\n\n        if(vocabs_db && vocabs_db.length === 0 || undefined){\n            return null;\n        }\n        //taking out 1 vocab for every 10 vocabs\n        while(random_i < vocabs_db.length - 10){\n            //this done\n            console.log('while loop random_i = ', random_i);\n            testing_vocabs.push(vocabs_db[random_i - Math.floor(Math.random() * 10)]);\n            random_i += 10;\n        }\n        vocabs_db = testing_vocabs;//now we are renewing the new vocabs to database\n        //words is changed to testing_vocabs\n        output_words = testing_vocabs;//words didn't change.\n        console.log('after modified outputwords : ',output_words);\n\n        var transaction = db.transaction('VocabDB', 'readwrite');\n\n        //success event handler for transaction\n        transaction.onsuccess = function(event){\n            console.log('[transaction] ALL DONE!')\n        }\n\n        var productsStore = transaction.objectStore('VocabDB');\n        if(condition == '1'){\n            vocabs_db.forEach(function(product){\n                productsStore.add(product);//IDBRequest\n            });\n        }\n        else{\n            productsStore.getAll().onsuccess = function(event){\n                console.log('here is condition 2');\n                console.log(event.target.result);\n                vocabs_db = event.target.result;\n\n                return vocabs_db;\n            };\n        }\n        /*\n        some tips how to CRUD the data\n        // count number of objects in store\n        productsStore.count().onsuccess = function(event) {\n            console.log('[Transaction - COUNT] number of products in store', event.target.result);\n        };\n\n        // get product with id 1\n        productsStore.get(1).onsuccess = function(event) {\n            console.log('[Transaction - GET] product with id 1', event.target.result);\n        };\n\n        // update product with id 1\n        products[0].name = 'Blue Men T-shirt';\n        productsStore.put(products[0]).onsuccess = function(event) {\n            console.log('[Transaction - PUT] product with id 1', event.target.result);\n        };\n\n        // delete product with id 2\n        productsStore.delete(2).onsuccess = function(event) {\n            console.log('[Transaction - DELETE] deleted with id 2');\n        };\n        */\n    };\n\n    //request on error\n    request.onerror = function(event) {\n        console.log('[onerror]', request.error);\n    };\n\n    //request on upgrade needed \n    request.onupgradeneeded = function(event) {\n        // create object store from db or event.target.result\n\n        var db = event.target.result;\n        //here crated Objectstore\n        var productsStore = db.createObjectStore('VocabDB', {keyPath: 'index'});\n        console.log('alelalelael');\n    };\n    console.log('outputwords are : ', output_words);\n    \n    return null;\n\n\n}\n/* \nconst Database = new Dexie('VocabDB');\nDatabase.version(1).stores({\n    vocabs: `index,name, age`\n});\n*/\nexport default Database;\n"]},"metadata":{},"sourceType":"module"}