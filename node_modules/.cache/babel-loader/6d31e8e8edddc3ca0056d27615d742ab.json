{"ast":null,"code":"var _jsxFileName = \"/Users/jeonghan.gam/Desktop/jgam/nihongo-app/src/Database.js\";\nimport React from 'react';\n/*\nDB creating steps\n1. Open a database\n2. Create an object store in the database\n3. Start a transaction and make a request to do some database operation, like adding or retrieving dta.\n4. Wait for the operation to complete by listening for the right kind of DOM event\n5. Do something with the rsults(whcih can be found on the request object).\n*/\n\nconst Database = ({\n  level,\n  handleButton\n}) => {\n  var request = self.indexedDB.open('EXAMPLE_DB', 1);\n\n  request.onsuccess = function (event) {\n    // some sample products data\n    var products = [{\n      id: 1,\n      name: 'Red Men T-Shirt',\n      price: '$3.99'\n    }, {\n      id: 2,\n      name: 'Pink Women Shorts',\n      price: '$5.99'\n    }, {\n      id: 3,\n      name: 'Nike white Shoes',\n      price: '$300'\n    }]; // get database from event\n\n    var db = event.target.result; // create transaction from database\n\n    var transaction = db.transaction('products', 'readwrite'); // add success event handleer for transaction\n    // you should also add onerror, onabort event handlers\n\n    transaction.onsuccess = function (event) {\n      console.log('[Transaction] ALL DONE!');\n    }; // get store from transaction\n\n\n    var productsStore = transaction.objectStore('products');\n    /*************************************/\n    // put products data in productsStore\n\n    products.forEach(function (product) {\n      var db_op_req = productsStore.add(product);\n\n      db_op_req.onsuccess = function (event) {\n        console.log(event.target.result == product.id); // true\n      };\n    }); // count number of objects in store\n\n    productsStore.count().onsuccess = function (event) {\n      console.log('[Transaction - COUNT] number of products in store', event.target.result);\n    }; // get product with id 1\n\n\n    productsStore.get(1).onsuccess = function (event) {\n      console.log('[Transaction - GET] product with id 1', event.target.result);\n    }; // update product with id 1\n\n\n    products[0].name = 'Blue Men T-shirt';\n\n    productsStore.put(products[0]).onsuccess = function (event) {\n      console.log('[Transaction - PUT] product with id 1', event.target.result);\n    }; // delete product with id 2\n\n\n    productsStore.delete(2).onsuccess = function (event) {\n      console.log('[Transaction - DELETE] deleted with id 2');\n    };\n  };\n\n  request.onerror = function (event) {\n    console.log('[onerror]', request.error);\n  };\n\n  request.onupgradeneeded = function (event) {\n    var db = event.target.result;\n    var productsStore = db.createObjectStore('products', {\n      keyPath: 'id'\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"hello world\");\n};\n\nexport default Database;","map":{"version":3,"sources":["/Users/jeonghan.gam/Desktop/jgam/nihongo-app/src/Database.js"],"names":["React","Database","level","handleButton","request","self","indexedDB","open","onsuccess","event","products","id","name","price","db","target","result","transaction","console","log","productsStore","objectStore","forEach","product","db_op_req","add","count","get","put","delete","onerror","error","onupgradeneeded","createObjectStore","keyPath"],"mappings":"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","sourcesContent":["import React from 'react';\n\n/*\nDB creating steps\n1. Open a database\n2. Create an object store in the database\n3. Start a transaction and make a request to do some database operation, like adding or retrieving dta.\n4. Wait for the operation to complete by listening for the right kind of DOM event\n5. Do something with the rsults(whcih can be found on the request object).\n*/\n\n\nconst Database = ({ level, handleButton }) =>{\n    \nvar request = self.indexedDB.open('EXAMPLE_DB', 1);\n\nrequest.onsuccess = function(event) {\n    // some sample products data\n    var products = [\n        {id: 1, name: 'Red Men T-Shirt', price: '$3.99'},\n        {id: 2, name: 'Pink Women Shorts', price: '$5.99'},\n        {id: 3, name: 'Nike white Shoes', price: '$300'}\n    ];\n\n    // get database from event\n    var db = event.target.result;\n\n    // create transaction from database\n    var transaction = db.transaction('products', 'readwrite');\n\n    // add success event handleer for transaction\n    // you should also add onerror, onabort event handlers\n    transaction.onsuccess = function(event) {\n        console.log('[Transaction] ALL DONE!');\n    };\n\n    // get store from transaction\n    var productsStore = transaction.objectStore('products');\n\n    /*************************************/\n\n    // put products data in productsStore\n    products.forEach(function(product){\n        var db_op_req = productsStore.add(product);\n\n        db_op_req.onsuccess = function(event) {\n            console.log(event.target.result == product.id); // true\n        }\n    });\n\n    // count number of objects in store\n    productsStore.count().onsuccess = function(event) {\n        console.log('[Transaction - COUNT] number of products in store', event.target.result);\n    };\n\n    // get product with id 1\n    productsStore.get(1).onsuccess = function(event) {\n        console.log('[Transaction - GET] product with id 1', event.target.result);\n    };\n\n    // update product with id 1\n    products[0].name = 'Blue Men T-shirt';\n    productsStore.put(products[0]).onsuccess = function(event) {\n        console.log('[Transaction - PUT] product with id 1', event.target.result);\n    };\n\n    // delete product with id 2\n    productsStore.delete(2).onsuccess = function(event) {\n        console.log('[Transaction - DELETE] deleted with id 2');\n    };\n};\n\nrequest.onerror = function(event) {\n    console.log('[onerror]', request.error);\n};\n\nrequest.onupgradeneeded = function(event) {\n    var db = event.target.result;\n    var productsStore = db.createObjectStore('products', {keyPath: 'id'});\n};\n\n    return(\n        <div>\n            hello world\n        </div>\n    )\n\n}\n\nexport default Database;"]},"metadata":{},"sourceType":"module"}