{"ast":null,"code":"import _slicedToArray from \"/Users/jeonghan.gam/Desktop/jgam/nihongo-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jeonghan.gam/Desktop/jgam/nihongo-app/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './css/App.css';\nimport Day from './Day';\nimport Level from './Level';\nimport Vocab from './Vocab';\nimport Form from './Form';\nimport Dexie from 'dexie'; //db steps\n\n/*\n1. Open a database\n2. Create an object store in the database\n3. Start transaction and make request to do some database operation, adding or retrieving data\n4. Wait for the operation to complete by listening for the right kind of DOM event\n5. Do something with the results\n*/\n\nclass App extends React.Component {\n  //constructor sets the state\n  constructor(props) {\n    super(props);\n\n    this.updateDB = () => {}\n    /*\n    vocabProgress[0].name = 'Blue Men T-shirt';\n     productsStore.put(vocabProgress[0]).onsuccess = function(event) {\n         console.log('[Transaction - PUT] product with id 1', event.target.result);\n     };\n    */\n    //handle functions update the states\n    ;\n\n    this.handleLevel = input_level => {\n      this.setState({\n        page_state: '2',\n        level: input_level\n      });\n    };\n\n    this.handleDays = (input_days, words_list, list_words, vocab_portion) => {\n      if (input_days > 0 && input_days < 8) {\n        this.setState({\n          page_state: '3',\n          days: input_days,\n          words: words_list,\n          list_words: list_words,\n          voc_range: vocab_portion\n        });\n      } else {\n        alert('This is either the first or last page');\n      }\n    };\n\n    this.handleHome = () => {\n      this.setState({\n        page_state: '1',\n        level: '',\n        days: 0,\n        words: [],\n        list_words: [],\n        voc_rage: 0\n      });\n    };\n\n    this.handleVocab = (input_vocab, definitions) => {\n      this.setState({});\n    };\n\n    this.render_views = page_state => {\n      var request = indexedDB.open('vocabDB', 1);\n\n      request.onsuccess = function (event) {\n        var db = event.target.result;\n        var transaction = db.transaction([\"VocabDB\"], 'readwrite');\n        var productsStore = transaction.objectStore('VocabDB');\n\n        productsStore.get(1).onsuccess = function (event) {\n          console.log('[Transaction - GET] product with id 1', event.target.result);\n        };\n      };\n\n      console.log('request is : ', request);\n      console.log('in renderviews: ', this.state.days);\n\n      if (page_state === '1') {\n        console.log('here');\n        return React.createElement(Level, {\n          handleButton: this.handleLevel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        });\n      } else if (page_state === '2') {\n        return React.createElement(Day, {\n          level: this.state.level,\n          handleButton: this.handleDays,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        });\n      } else if (page_state === '3') {\n        return React.createElement(Vocab, {\n          output_words: this.state.words,\n          handleButton: this.handleVocab,\n          prevButton: this.handleDays,\n          nextButton: this.handleDays,\n          list_words: this.state.list_words,\n          vocab_portion: this.state.voc_range,\n          day: this.state.days,\n          handleHome: this.handleHome,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        });\n      } else {\n        return 'error occurred';\n      }\n    };\n\n    this.state = {\n      page_state: '1',\n      level: '',\n      days: 0,\n      words: [],\n      list_words: [],\n      voc_rage: 0\n    }; //db setup\n  } //db add data!\n\n\n  render() {\n    //state logic\n    var current_state = this.state.page_state;\n    console.log('state inputs days: ', this.state.days);\n\n    const _useState = useState(true),\n          _useState2 = _slicedToArray(_useState, 2),\n          open = _useState2[0],\n          setOpen = _useState2[1]; //return\n\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"btn-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"em\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }))), React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"stateViews\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => setOpen(!open),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"\".concat(open ? 'Close' : 'Open', \" Form\")), open && React.createElement(Form, {\n      db: new Dexie('FormDatabase'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), this.render_views(current_state)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jeonghan.gam/Desktop/jgam/nihongo-app/src/App.js"],"names":["React","Day","Level","Vocab","Form","Dexie","App","Component","constructor","props","updateDB","handleLevel","input_level","setState","page_state","level","handleDays","input_days","words_list","list_words","vocab_portion","days","words","voc_range","alert","handleHome","voc_rage","handleVocab","input_vocab","definitions","render_views","request","indexedDB","open","onsuccess","event","db","target","result","transaction","productsStore","objectStore","get","console","log","state","render","current_state","useState","setOpen","logo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './css/App.css';\nimport Day from './Day';\nimport Level from './Level';\nimport Vocab from './Vocab';\nimport Form from './Form'\nimport Dexie from 'dexie'\n\n//db steps\n\n/*\n1. Open a database\n2. Create an object store in the database\n3. Start transaction and make request to do some database operation, adding or retrieving data\n4. Wait for the operation to complete by listening for the right kind of DOM event\n5. Do something with the results\n*/\n\n\n\nclass App extends React.Component {\n  //constructor sets the state\n  constructor(props){\n    super(props);\n    this.state = {\n      page_state: '1',\n      level: '',\n      days: 0,\n      words: [],\n      list_words: [],\n      voc_rage: 0\n    };\n\n    //db setup\n  \n }\n\n  //db add data!\n  updateDB = () => {\n    /*\n    vocabProgress[0].name = 'Blue Men T-shirt';\n     productsStore.put(vocabProgress[0]).onsuccess = function(event) {\n         console.log('[Transaction - PUT] product with id 1', event.target.result);\n     };\n    */\n\n\n  }\n\n  //handle functions update the states\n  handleLevel = input_level => {\n    this.setState({\n      page_state: '2',\n      level: input_level\n    });\n  }\n\n  handleDays = (input_days, words_list, list_words, vocab_portion) => {\n    if (input_days > 0 && input_days < 8){\n      this.setState({\n        page_state:'3',\n        days: input_days,\n        words: words_list,\n        list_words: list_words,\n        voc_range: vocab_portion\n      });\n    }\n    else{\n      alert('This is either the first or last page');\n    }\n  }\n\n  handleHome = () => {\n    this.setState({\n      page_state: '1',\n      level: '',\n      days: 0,\n      words: [],\n      list_words: [],\n      voc_rage: 0\n    })\n  }\n\n  handleVocab = (input_vocab, definitions) => {\n    this.setState({\n\n    })\n  }\n\n\n  render_views = page_state => {\n    var request = indexedDB.open('vocabDB', 1);\n    request.onsuccess = function(event){\n      var db = event.target.result;\n      var transaction = db.transaction([\"VocabDB\"], 'readwrite');\n      var productsStore = transaction.objectStore('VocabDB');\n      productsStore.get(1).onsuccess = function(event) {\n        console.log('[Transaction - GET] product with id 1', event.target.result);\n    };\n    }\n\n    console.log('request is : ',request);\n    console.log('in renderviews: ', this.state.days);\n    if(page_state === '1'){\n      console.log('here')\n      return <Level handleButton={this.handleLevel}/>\n    }\n    else if(page_state === '2'){\n      return <Day level={this.state.level} handleButton={this.handleDays}/>\n    }\n    else if(page_state === '3'){\n      return <Vocab output_words={this.state.words} handleButton={this.handleVocab}\n      prevButton={this.handleDays} nextButton={this.handleDays} \n      list_words={this.state.list_words} vocab_portion={this.state.voc_range}\n      day={this.state.days} handleHome={this.handleHome}/>;\n    }\n    else{\n      return 'error occurred';\n    }\n  }\n\n  render(){\n    //state logic\n    var current_state = this.state.page_state;\n    console.log('state inputs days: ',this.state.days);\n\n    const [open, setOpen] = useState(true)\n\n    //return\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"btn-menu\">\n            <a href=\"\">\n              <em>\n              </em>\n            </a>\n          </div>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <div className=\"stateViews\">\n          <button onClick={() => setOpen(!open)}>{`${\n            open ? 'Close' : 'Open'\n            } Form`}</button>\n          {/* Pass in a new connection to the database when Form is first rendered */}\n          {open && <Form db={new Dexie('FormDatabase')} />}\n          {this.render_views(current_state)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}